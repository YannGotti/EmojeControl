import os, asyncio

from aiogram import types
from aiogram.dispatcher.filters import CommandStart, Text

from loader import dp, bot
from messages import *
from config import ADMINS

game_active = False

scores = {}

DIR_PATH = os.path.dirname(os.path.realpath(__file__))

async def anti_flood(*args, **kwargs):
    message = args[0]
    await message.delete()
    msg = await message.answer("–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 25 —Å–µ–∫")
    await asyncio.sleep(2)
    await msg.delete()


@dp.message_handler(CommandStart())
@dp.throttled(anti_flood, rate=25)
async def start_command_handler(message: types.Message):
    global game_active

    if (not game_active):
        return
    
    scores.clear()
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä –ø–æ –±—Ä–æ—Å–∞–Ω–∏—é emoji –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞! "
                        "–ß—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –º—è—á, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç.")

@dp.message_handler(content_types=types.ContentType.DICE)
async def handle_dice(message: types.Message):
    if (message.chat.type == "private"):
        return
    
    global game_active

    if (not game_active):
        return
    
    if message.dice.emoji == "üèÄ":
        player_id = message.from_user.id
        player_name = message.from_user.username or message.from_user.first_name
        msg = None

        await asyncio.sleep(4)

        scores[player_name] = scores.get(player_name, 0) + message.dice.value
        msg = await message.reply(f"–û—Ç–ª–∏—á–Ω–æ, {player_name}! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {message.dice.value} {format_score(message.dice.value)}. –£ –≤–∞—Å –≤—Å–µ–≥–æ {scores[player_name]} {format_score(message.dice.value)}.")
        await asyncio.sleep(2)
        await msg.delete()
        await message.delete()
        
    
    #if message.dice.emoji == 'üèÄ' or message.dice.emoji == 'üé≤' or message.dice.emoji == 'üéØ' or message.dice.emoji == '‚öΩ' or message.dice.emoji == 'üé∞' or message.dice.emoji == 'üé≥': 
    #    if message.from_user.id in ADMINS: 
    #        await message.answer('You are my master!')
    #        await message.answer(f'–ú–ê–≠–°–¢–†–û –ë–†–ê–í–û!! {message.dice.value} –æ—á–∫–∞!!')
    #        return 
    #    
    #    msg = await bot.send_message(message.chat.id, f'You are not my master! –ü–æ—Å–æ—Å–∏ @{message.from_user.username} !!!')
        #await message.delete()
        #await asyncio.sleep(5)
        #await msg.delete()
        #return


@dp.callback_query_handler(lambda c: True)
async def inline_button_handler(callback_query: types.CallbackQuery):

    global game_active

    if callback_query.from_user.id not in ADMINS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return

    if callback_query.data == "startGame":
        game_active = True
        await callback_query.answer("–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏–≥—Ä—É")

    elif callback_query.data == "stopGame":
        game_active = False
        await callback_query.answer("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É")
    



@dp.message_handler(commands=['results'], user_id=ADMINS)
async def results_command_handler(message: types.Message):
    

    if scores:
        winner = max(scores, key=scores.get)

        text = ""

        for name, score in scores.items():
            text += (f'–ò–≥—Ä–æ–∫ {name} - {score} {format_score(score)} \n')

        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
                            f"{text}\n"
                            f"<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å {winner}!!</b>", parse_mode=types.ParseMode.HTML)
    else:
        await message.reply("–ü–æ–∫–∞ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ.")


def format_score(score):
    if (score == 1): return '–æ—á–∫–æ'
    if (score > 1 and score < 5): return '–æ—á–∫–∞'
    if (score > 4): return '–æ—á–∫–æ–≤'

@dp.message_handler(commands=['hi'])
async def handle_dice(message: types.Message):
    photos = await message.from_user.get_profile_photos()
    latest_photo = photos.photos[0][0]

    msg = await message.answer_photo(latest_photo.file_id)
    await asyncio.sleep(1)
    await message.delete()
    await msg.delete()


